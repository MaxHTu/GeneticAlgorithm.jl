var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeneticAlgorithm","category":"page"},{"location":"#GeneticAlgorithm","page":"Home","title":"GeneticAlgorithm","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GeneticAlgorithm.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GeneticAlgorithm]","category":"page"},{"location":"#GeneticAlgorithm.binarystring-Tuple{AbstractVector}","page":"Home","title":"GeneticAlgorithm.binarystring","text":"binarystring(x)\n\nCompute the fitness of a binary string unit.\n\nArguments\n\nx: Input vector.\n\nReturns\n\nThe digit sum of input vector.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.default_selection-Tuple{Union{AbstractMatrix, AbstractVector}, Integer}","page":"Home","title":"GeneticAlgorithm.default_selection","text":"default_selection(population::Vector, num::Integer)\n\nSelect num random genes from population.\n\nArguments\n\npopulation: Population vector.\nnum: Amount of genes to select\n\nReturns\n\nnum selected genes\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.genAlgo-Tuple{Function, Integer, Union{Type, AbstractVector{<:Real}}, AbstractVector{<:Integer}, Integer, Function, Function, Function, Vararg{Real, 4}}","page":"Home","title":"GeneticAlgorithm.genAlgo","text":"genAlgo(     popSize::Integer,     unitValues::Type,     unitShape::Integer,     fitnessFunc::Function,     genNum::Integer,     selection::Function,     crossover::Function,     mutation::Function,     crossRate::Real,     mutRate::Real )\n\nTODO: description\n\nArguments\n\nfitnessFunc: Fitness function.\npopSize: Size of population.\nunitValues: Type of unit.\nunitShape: Length of a unit vector.\ngenNum: Number of generations.\nselection: Selection function.\ncrossover: Crossover function.\nmutation: Mutation function.\ncrossRate: Crossover rate.\nmutRate: Mutation rate.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.geneticAlgorithm-Tuple{Function, Integer, Union{Type, AbstractVector{<:Real}}, AbstractVector{<:Integer}, Integer, Function, Function, Function, Vararg{Real, 4}}","page":"Home","title":"GeneticAlgorithm.geneticAlgorithm","text":"geneticAlgorithm(     popSize::Integer,     unitValues::Type,     unitShape::Integer,     fitnessFunc::Function,     genNum::Integer,     selection::Function,     crossover::Function,     mutation::Function,     crossRate::Real,     mutRate::Real,     nextGenAmt::Real,     terminationNum::Real;     initFunc::Function )\n\nEvolve the population of units for a specified number of generations. The loop creates a new population every generation by selecting units with higher fitness, recombinating and mutating them until the old population can be replaced by a fitter one.\n\nArguments\n\nfitnessFunc: Fitness function.\npopSize: Size of population.\nunitValues: Type of unit.\nunitShape: Length of a unit vector.\ngenNum: Number of generations.\nselection: Selection function.\ncrossover: Crossover function.\nmutation: Mutation function.\ncrossRate: Crossover rate.\nmutRate: Mutation rate.\nnextGenAmt: amount of genes that are automatically copied to new generation\nterminationNum: number of iteration after which the algorithm aborts if there is no change in fitness value from the best gene\ninitFunc: function to generate initial population\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.griewank-Tuple{AbstractVector{<:Number}}","page":"Home","title":"GeneticAlgorithm.griewank","text":"griewank(x)\n\nCompute the Griewank function value for a given input vector x.\n\nThe Griewank function is a multimodal function used as a performance test problem for optimization algorithms. It is defined as the difference between two terms: the sum of the squares of each element in x divided by 4000, and the product of the cosine of each element in x divided by the square root of its index.\n\nArguments\n\nx: Input vector.\n\nReturns\n\nThe Griewank function value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.k_point_crossover-Tuple{Union{AbstractMatrix, AbstractVector}, Union{AbstractMatrix, AbstractVector}, Integer}","page":"Home","title":"GeneticAlgorithm.k_point_crossover","text":"k_point_crossover(gene1::Union{AbstractVector, AbstractMatrix}, gene2::Union{AbstractVector, AbstractMatrix}, k::Integer)\n\nRecombinate two units by exchanging their genes at k random points\n\nArguments\n\ngene1: Parent unit 1.\ngene2: Parent unit 2.\nk: # of crossover points.\n\nReturns\n\nTwo recombined child units.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.quartic-Tuple{AbstractVector{<:Number}}","page":"Home","title":"GeneticAlgorithm.quartic","text":"quartic(x)\n\nCompute the quartic function value for a given input vector x.\n\nThe quartic function is defined as the sum of the product of each element in x raised to the power of 4 and its index, plus a random number.\n\nArguments\n\nx: Input vector.\n\nReturns\n\nThe quartic function value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.rastrigin-Tuple{AbstractVector{<:Number}}","page":"Home","title":"GeneticAlgorithm.rastrigin","text":"rastrigin(x)\n\nCompute the Rastrigin function value for a given input vector x.\n\nThe Rastrigin function is a multimodal function used as a performance test problem for optimization algorithms. It is defined as a sum of terms involving the square of each element in x, minus 10 times the cosine of 2Ï€ times each element in x.\n\nArguments\n\nx: Input vector.\n\nReturns\n\nThe Rastrigin function value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.rosenbrock-Tuple{Vector{<:Number}}","page":"Home","title":"GeneticAlgorithm.rosenbrock","text":"rosenbrock(x)\n\nCompute the Rosenbrock function value for a given input vector x.\n\nThe Rosenbrock function is a non-convex function used as a performance test problem for optimization algorithms. It is defined as the sum of a series of terms involving the squares of differences between adjacent elements of x.\n\nArguments\n\nx: Input vector.\na: value for the variable a\nb: value for the variable b\n\nReturns\n\nThe Rosenbrock function value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.schwefel-Tuple{AbstractVector{<:Number}}","page":"Home","title":"GeneticAlgorithm.schwefel","text":"schwefel(x)\n\nCompute the Schwefel function value for a given input vector x.\n\nThe Schwefel function is a multimodal function used as a performance test problem for optimization algorithms. It is defined as a sum of terms involving the sine function and the square root of the absolute value of each element in x.\n\nArguments\n\nx: Input vector.\n\nReturns\n\nThe Schwefel function value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.single_point_crossover-Tuple{Union{AbstractMatrix, AbstractVector}, Union{AbstractMatrix, AbstractVector}}","page":"Home","title":"GeneticAlgorithm.single_point_crossover","text":"single_point_crossover(gene1::Union{AbstractVector, AbstractMatrix}, gene2::Union{AbstractVector, AbstractMatrix})\n\nRecombinate two units by exchanging their genes from a random index onward.\n\nArguments\n\ngene1: Parent unit 1.\ngene2: Parent unit 2.\n\nReturns\n\nTwo recombined child units.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.solveRosenbrock-Tuple{}","page":"Home","title":"GeneticAlgorithm.solveRosenbrock","text":"solveRosenbrock(;     a::Integer,     b::Integer,     popSize::Integer,     fitnessFunc::Function,     unitValues::Union{Type, AbstractVector{<:AbstractFloat}, AbstractRange{<:Real}},     unitShape::AbstractVector{<:Integer},     genNum::Integer,     crossRate::Real,     mutRate::Real,     nextGenAmt::Number,     selectionFunc::Function,     crossoverFunc::Function,     mutationFunc::Function ,     terminationNum::Real )\n\nRuns the rosenbrock function with the geneticAlgorithm\n\nArguments\n\na: rosenbrock function variable\nb: rosenbrock function variable\npopSize: Size of population.\nfitnessFunc: Fitness function.\nunitValues: Type of unit.\nunitShape: Length of a unit vector.\ngenNum: Number of generations.\ncrossRate: Crossover rate.\nmutRate: Mutation rate.\nnextGenAmt: amount of genes that are automatically copied to new generation\nselectionFunc: Selection function.\ncrossoverFunc: Crossover function.\nmutationFunc: Mutation function.\nterminationNum: number of iteration after which the algorithm aborts if there is no change in fitness value from the best gene\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.sphere-Tuple{Vector{<:Number}}","page":"Home","title":"GeneticAlgorithm.sphere","text":"sphere(x)\n\nCompute the sphere function value for a given input vector x.\n\nThe sphere function is defined as the sum of the squares of each element in x.\n\nArguments\n\nx: Input vector.\n\nReturns\n\nThe sphere function value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.tournament_selection-Tuple{AbstractVector, AbstractVector, Integer}","page":"Home","title":"GeneticAlgorithm.tournament_selection","text":"tournament_selection(population::Vector, fitness::Vector, tournamentSize::Int, num::Integer)\n\nSelect one unit with higher fitness over several tournament rounds with randomly chosen groups of unit from the population .\n\nArguments\n\npopulation: Population vector.\nfitness: Vector of fitness values.\ntournamentSize: Size of tournament groups.\nnum: Amount of genes to select\n\nReturns\n\nThe unit with better fitness value.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.transformRange-Tuple{Union{Real, Matrix, Vector}, Vararg{Real, 4}}","page":"Home","title":"GeneticAlgorithm.transformRange","text":"transformRange(     values::Union{Vector,Matrix},     oldMax::Real,     oldMin::Real,     newMax::Real,     newMin::Real )\n\nTransforms values in a vector or matrix to a new range.\n\nArguments\n\n'values' Values to be transformed 'oldMax' The maximum value of the old range 'oldMin' The minimum value of the old range 'newMax' The maximum value of the new range 'newMin' The minimum value of the new range\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.uniform_crossover-Tuple{Union{AbstractMatrix, AbstractVector}, Union{AbstractMatrix, AbstractVector}}","page":"Home","title":"GeneticAlgorithm.uniform_crossover","text":"uniform_crossover(gene1::Union{AbstractVector, AbstractMatrix}, gene2::Union{AbstractVector, AbstractMatrix})\n\nRecombinate two units by iterating a gene and swapping the values with a 50% chance\n\nArguments\n\ngene1: Parent unit 1.\ngene2: Parent unit 2.\n\nReturns\n\nTwo recombined child units.\n\n\n\n\n\n","category":"method"},{"location":"#GeneticAlgorithm.weighted_selection-Tuple{AbstractVector, AbstractVector, Integer}","page":"Home","title":"GeneticAlgorithm.weighted_selection","text":"weighted_selection(population::Vector, fitness::Vector, num::Integer)\n\nSelect num random genes from population weight by the fitness of the genes\n\nArguments\n\npopulation: Population vector.\nfitness: Vector of fitness values.\nnum: Amount of genes to select\n\nReturns\n\nnum selected genes\n\n\n\n\n\n","category":"method"}]
}
